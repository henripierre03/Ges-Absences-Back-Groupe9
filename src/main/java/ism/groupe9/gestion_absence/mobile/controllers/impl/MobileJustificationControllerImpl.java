package ism.groupe9.gestion_absence.mobile.controllers.impl;

import java.io.IOException;
import java.time.LocalDateTime;
import java.util.List;
// Generated by the protocol buffer compiler.  DO NOT EDIT!
import java.util.Map;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import ism.groupe9.gestion_absence.data.entities.Absence;
import ism.groupe9.gestion_absence.data.entities.Justification;
import ism.groupe9.gestion_absence.data.enums.TypeAbsence;
import ism.groupe9.gestion_absence.mobile.controllers.MobileJustificationController;
import ism.groupe9.gestion_absence.mobile.mappers.MobileJustificationMapper;
import ism.groupe9.gestion_absence.services.AbsenceService;
import ism.groupe9.gestion_absence.services.CloudnaryService;
import ism.groupe9.gestion_absence.services.JustificationService;
import ism.groupe9.gestion_absence.web.dto.response.RestResponse;
import lombok.RequiredArgsConstructor;

@RestController
@RequiredArgsConstructor
public class MobileJustificationControllerImpl implements MobileJustificationController {

  private final JustificationService justificationService;
  private final AbsenceService absenceService;
  private final CloudnaryService cloudinaryService;
  private final MobileJustificationMapper justificationMapper;

  @Override
  public ResponseEntity<Map<String, Object>> getByAbsenceId(String absenceId) {
    // TODO Auto-generated method stub
    throw new UnsupportedOperationException("Unimplemented method 'getByAbsenceId'");
  }

  @Override
  public ResponseEntity<Map<String, Object>> create(
      String absenceId,
      @RequestParam("files") List<MultipartFile> files,
      @RequestParam("etudiantId") String etudiantId,
      @RequestParam("message") String message,
      @RequestParam(value = "validation", defaultValue = "false") boolean validation) {

    try {
      Absence absence = absenceService.getById(absenceId);
      if (absence == null) {
        return new ResponseEntity<>(RestResponse.response(HttpStatus.NOT_FOUND, "Absence non trouvée", "string"),
            HttpStatus.NOT_FOUND);
      }
      if (absence.getTypeAbsence() == TypeAbsence.PRESENCE || absence.getTypeAbsence() == TypeAbsence.RETARD) {
        return new ResponseEntity<>(
            RestResponse.response(HttpStatus.BAD_REQUEST, "Cette absence ne peut pas avoir de justification", "string"),
            HttpStatus.BAD_REQUEST);
      }

      // 1. Upload des fichiers sur Cloudinary
      List<String> fileUrls = cloudinaryService.uploadFiles(files);

      // 2. Créer la justification
      Justification justification = new Justification();
      justification.setEtudiantId(etudiantId);
      justification.setAbsenceId(absenceId);
      justification.setDate(LocalDateTime.now());
      justification.setMessage(message);
      justification.setValidation(validation);
      justification.setJustificatifs(fileUrls);

      // 3. Sauvegarder la justification
      var savedJustification = justificationService.create(justification);

      return new ResponseEntity<>(
          RestResponse.response(HttpStatus.CREATED,
              justificationMapper.toJustificationSimpleResponse(savedJustification),
              "justificationSimpleResponse"),
          HttpStatus.CREATED);

    } catch (IllegalArgumentException e) {
      return new ResponseEntity<>(
          RestResponse.response(HttpStatus.BAD_REQUEST, e.getMessage(), "string"),
          HttpStatus.BAD_REQUEST);
    } catch (IOException e) {
      return new ResponseEntity<>(
          RestResponse.response(HttpStatus.INTERNAL_SERVER_ERROR,
              "Erreur lors de l'upload des fichiers",
              "string"),
          HttpStatus.INTERNAL_SERVER_ERROR);
    }
  }

  // var justification = justificationMapper.toEntity(request);
  // justification.setAbsenceId(absenceId);
  // var newJustification = justificationService.create(justification);
  // return new ResponseEntity<>(
  // RestResponse.response(HttpStatus.CREATED,
  // justificationMapper.toJustificationSimpleResponse(newJustification),
  // "justificationSimpleResponse"),
  // HttpStatus.CREATED);

}
