package ism.groupe9.gestion_absence.mobile.controllers.impl;

// Generated by the protocol buffer compiler.  DO NOT EDIT!
import java.util.Map;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.RestController;

import ism.groupe9.gestion_absence.data.entities.Absence;
import ism.groupe9.gestion_absence.data.entities.Justification;
import ism.groupe9.gestion_absence.mobile.controllers.MobileJustificationController;
import ism.groupe9.gestion_absence.mobile.dto.request.JustificationCreateRequest;
import ism.groupe9.gestion_absence.mobile.mappers.JustificationMapper;
import ism.groupe9.gestion_absence.services.AbsenceService;
import ism.groupe9.gestion_absence.services.JustificationService;
import ism.groupe9.gestion_absence.web.dto.response.RestResponse;
import lombok.RequiredArgsConstructor;

@RestController
@RequiredArgsConstructor
public class MobileJustificationControllerImpl implements MobileJustificationController {

  private final JustificationService justificationService;
  private final AbsenceService absenceService;
  private final JustificationMapper justificationMapper;

  @Override
  public ResponseEntity<Map<String, Object>> getByAbsenceId(String absenceId) {
    // TODO Auto-generated method stub
    throw new UnsupportedOperationException("Unimplemented method 'getByAbsenceId'");
  }

  @Override
  public ResponseEntity<Map<String, Object>> create(String absenceId, JustificationCreateRequest request) {
    Absence absence = absenceService.getById(absenceId);
    if (absence == null) {
      return new ResponseEntity<>(RestResponse.response(HttpStatus.NOT_FOUND, "Absence not found", "string"),
          HttpStatus.NOT_FOUND);
    }
    Justification existingJustification = justificationService.getByAbsence(absenceId);
    if (existingJustification != null) {
      return new ResponseEntity<>(
          RestResponse.response(HttpStatus.BAD_REQUEST, "Cette absence a deja une justification", "string"),
          HttpStatus.BAD_REQUEST);
    }
    var justification = justificationMapper.toEntity(request);
    justification.setAbsenceId(absenceId);
    var newJustification = justificationService.create(justification);
    return new ResponseEntity<>(
        RestResponse.response(HttpStatus.CREATED,
            justificationMapper.toJustificationSimpleResponse(newJustification), "justificationSimpleResponse"),
        HttpStatus.CREATED);

  }
}
